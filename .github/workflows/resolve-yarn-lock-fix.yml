name: Resolve yarn.lock (test fix)

on:
  issue_comment:
    types: [created]

jobs:
  resolve-yarn-lock-on-comment-fix:
    name: Resolve yarn.lock on comment (test fix)
    runs-on: ubuntu-latest
    if: contains(github.event.comment.body, '/resolve-test yarn.lock')

    steps:
      - name: Checkout code
        uses: actions/checkout@1d96c772d19495a3b5c517cd2bc0cb401ea0529f # v4

      - name: Get PR branch names
        env:
          REPO: ${{ github.repository }}
          PR_NO: ${{ github.event.issue.number }}
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "HEAD_BRANCH=$(gh pr view $PR_NO --repo $REPO --json headRefName --jq '.headRefName')" >> $GITHUB_ENV
          echo "BASE_BRANCH=$(gh pr view $PR_NO --repo $REPO --json baseRefName --jq '.baseRefName')" >> $GITHUB_ENV

      - name: Checkout PR branch and merge base branch
        run: |
          git log --graph --oneline --all -n 20
          git config --global user.email "txo-github-bot[bot]@users.noreply.github.com"
          git config --global user.name "TXO GitHub Bot[bot]"
          git fetch origin ${{ env.BASE_BRANCH }}
          git fetch origin ${{ env.HEAD_BRANCH }}
          git checkout ${{ env.BASE_BRANCH }}
          git pull
          git checkout ${{ env.HEAD_BRANCH }}
          git pull
          git merge ${{ env.BASE_BRANCH }} || true

      - name: Check for merge conflict on yarn.lock file
        run: |
          YARN_LOCK_HAS_CONFLICTS=$(git ls-files -u | grep yarn.lock | wc -l)
          echo "YARN_LOCK_HAS_CONFLICTS=$YARN_LOCK_HAS_CONFLICTS" >> $GITHUB_ENV

      - name: Run yarn install to resolve conflicts automatically
        if: env.YARN_LOCK_HAS_CONFLICTS > 0
        run: |
          yarn install

      # - name: Commit yarn.lock
      #   run: |
      #     git add yarn.lock
      #     git commit -m "chore: resolve yarn.lock"

      # - name: Push yarn.lock
      #   run: |
      #     git push
